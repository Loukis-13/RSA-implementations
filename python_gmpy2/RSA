#! /usr/bin/env python

import argparse
import rsa
import gmpy2


def __keygen(args):
    (e, n), (d, n) = rsa.keygen(args.p, args.q, args.bit_len)

    if args.print:
        print(f"Public  key: ({e:X}, {n:X})")
        print(f"Private key: ({d:X}, {n:X})")

    file = args.name
    with open(f"{file}.pub", "w") as pub, open(file, "w") as pri:
        pub.write(f"{e:X} {n:X}\n")
        pri.write(f"{d:X} {n:X}\n")


def __encrypt(args):
    print(f"{rsa.encrypt(args.text, args.keys[0], args.keys[1]):X}")


def __decrypt(args):
    print(rsa.decrypt(args.text, args.keys[0], args.keys[1]))


def prime(n):
    n = gmpy2.mpz(n)
    if gmpy2.is_prime(n):
        return n
    else:
        raise ValueError(f"{n} is not prime")


parser = argparse.ArgumentParser(prog="RSA", description="RSA algorithm implemented in Python")
subparsers = parser.add_subparsers(required=True, help="RSA options")

keygen = subparsers.add_parser("keygen", help="generate the public and private keys pair")
keygen.add_argument("-p", type=prime, help="define the value of p, randomly generated if not passed")
keygen.add_argument("-q", type=prime, help="define the value of q, randomly generated if not passed")
keygen.add_argument("--print", action="store_true", help="print the keys")
keygen.add_argument("--name", type=str, default="RSA-key", help="name of the files that will store the keys. (Defaul 'RSA-key')")
keygen.add_argument("--bit_len", type=int, default=128, help="bit length of the generated numbers (default 128)")
keygen.set_defaults(func=__keygen)

encrypt = subparsers.add_parser("encrypt", help="encrypt string using RSA public keys")
encrypt.add_argument("text", type=str, help="string to be encrypted")
encrypt.add_argument("keys", type=lambda x: gmpy2.mpz(x, base=16), nargs=2, help="RSA public key pair")
encrypt.set_defaults(func=__encrypt)

decrypt = subparsers.add_parser("decrypt", help="decrypt string using RSA private keys")
decrypt.add_argument("text", type=str, help="string to be decrypted")
decrypt.add_argument("keys", type=lambda x: gmpy2.mpz(x, base=16), nargs=2, help="RSA private key pair")
decrypt.set_defaults(func=__decrypt)

args = parser.parse_args()
args.func(args)
